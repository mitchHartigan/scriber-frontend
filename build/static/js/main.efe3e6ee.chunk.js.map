{"version":3,"sources":["components/StickyNote.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["StickyNote","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDrag","e","ui","_this$state$deltaPosi","state","deltaPosition","x","y","xPos","deltaX","yPos","deltaY","setState","updateParentPos","index","saveText","text","updateParentText","updateChildState","event","textVal","target","value","toggleMode","isEditing","renderDisplayMode","react_default","a","createElement","react_draggable_default","onDrag","defaultPosition","bounds","className","onClick","renderEditMode","cancel","defaultValue","onChange","deleteNote","isDragging","children","inherits","createClass","key","Component","Board","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","notes","populateStateFromStorage","getItem","parse","createNote","currentState","newNote","Math","floor","random","window","innerWidth","innerHeight","push","splice","eachNote","i","components_StickyNote","addEventListener","bind","removeEventListener","_this2","map","App","components_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efe3e6ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nexport class StickyNote extends Component {\r\n  // This is the Sticky Note component, which will render one sticky note when called.\r\n  // The component expects a text value input as a child, and an index value (representing\r\n  // it's correlating value in the parent array of post it elements) passed in as a prop.\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDragging: false,\r\n      isEditing: false,\r\n      textVal: this.props.children,\r\n      deltaPosition: {\r\n        x: this.props.xPos,\r\n        y: this.props.yPos\r\n      },\r\n      index: this.props.index,\r\n    };\r\n  }\r\n\r\n  // Method that updates the x and y positions of the StickyNote element in both the state of \r\n  // the individual child StickyNote element, and in the notes[] array of the Board element,\r\n  // each time the note is moved.\r\n  handleDrag = (e, ui) => {\r\n    const { x, y } = this.state.deltaPosition;\r\n    let xPos = x + ui.deltaX;\r\n    let yPos = y + ui.deltaY;\r\n    this.setState({\r\n      deltaPosition: {\r\n        x: xPos,\r\n        y: yPos\r\n      }\r\n    });\r\n    this.props.updateParentPos(this.props.index, xPos, yPos);\r\n  };\r\n\r\n  // Sends the updated textarea value to the parent Board element, stored in this child\r\n  // element as it's state, and passed in through the toggleMode() function.\r\n  saveText = text => {\r\n    this.props.updateParentText(this.props.index, text);\r\n  };\r\n\r\n  // Updates the state of this post it element's textVal onChange, called each\r\n  // time the value in the textarea changes.\r\n  updateChildState = event => {\r\n    this.setState({ textVal: event.target.value });\r\n  };\r\n\r\n  // Toggles the state of the post it between edit mode and display mode. The\r\n  // ! is used to make sure the state is always changed to the opposite of it's\r\n  // current value, as this function is called in both modes.\r\n\r\n  // This function also passes the text area value to saveText(), which will send it\r\n  // to the parent element.\r\n  toggleMode = text => {\r\n    if (this.state.isEditing) {\r\n      this.saveText(text);\r\n    }\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  };\r\n\r\n  // The 'display mode' for the post it, where the text cannot be edited. On button press, the\r\n  // element will re-render into edit mode.\r\n  renderDisplayMode = () => {\r\n    return (\r\n      <Draggable\r\n        onDrag={this.handleDrag}\r\n        defaultPosition={{ x: this.props.xPos, y: this.props.yPos }}\r\n        bounds=\"body\"\r\n      >\r\n        <div className=\"postItStatic\">\r\n          <div className=\"postItWrapper\">\r\n            <p className=\"postItText\">{this.state.textVal}</p>\r\n          </div>\r\n          <button onClick={this.toggleMode} className=\"editButton\">\r\n            Edit\r\n          </button>\r\n        </div>\r\n      </Draggable>\r\n    );\r\n  };\r\n\r\n  // The editing mode version of the post it, which displays a textarea, and saves each\r\n  // change the user makes to the text value inside. When the save button is\r\n  // clicked, the parent board component is sent the value of the textbox, which updates\r\n  // the notes array in the Board elements state accordingly.\r\n  renderEditMode = () => {\r\n    return (\r\n      <Draggable onDrag={this.handleDrag} cancel=\"textarea\" bounds=\"body\">\r\n        <div className=\"postItEditing\">\r\n          <textarea\r\n            className=\"postItTextArea\"\r\n            defaultValue={this.state.textVal}\r\n            onChange={this.updateChildState}\r\n          />\r\n          <button\r\n            onClick={() => this.toggleMode(this.state.textVal)}\r\n            className=\"saveButton\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.deleteNote(this.props.index)}\r\n            className=\"deleteButton\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </Draggable>\r\n    );\r\n  };\r\n\r\n  // Renders the post it in either view depending on whether or not it's in edit mode,\r\n  // allowing for easily swapping between them on button press.\r\n  render() {\r\n    if (this.state.isEditing) {\r\n      return this.renderEditMode();\r\n    } else {\r\n      return this.renderDisplayMode();\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default StickyNote;\r\n","import React, { Component } from \"react\";\r\nimport StickyNote from \"./StickyNote.js\";\r\n\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // An array of text, representing the notes that will be 'pre rendered' on first load.\r\n    // This array will update each time an individual post its value changes to match what\r\n    // is currently being displayed - ie, notes[] will save all of the post its\r\n    // on the board at any point.\r\n    this.state = {\r\n      notes: []\r\n    };\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------------------\r\n  // Code that is responsible for saving the notes the user has on screen to\r\n  // the browsers local storage, and for populating the screen with that saved\r\n  // data on page load - thus simulating the effect of a backend database.\r\n  // -------------------------------------------------------------------------------------------------------\r\n\r\n  saveStateToLocalStorage = key => {\r\n    // where key is just notes, not 'notes'\r\n    for (key in this.state) {\r\n      localStorage.setItem(key, JSON.stringify(this.state.notes));\r\n    }\r\n  };\r\n\r\n  populateStateFromStorage = key => {\r\n    let notes = localStorage.getItem(key);\r\n    notes = JSON.parse(notes);\r\n    this.setState({ notes: notes });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.populateStateFromStorage(\"notes\");\r\n    window.addEventListener(\r\n      \"beforeunload\",\r\n      this.saveStateToLocalStorage.bind(this)\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\r\n      \"beforeunload\",\r\n      this.saveStateToLocalStorage.bind(this)\r\n    );\r\n    this.saveStateToLocalStorage(\"notes\");\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------------------\r\n  // Code for managing the notes displayed on the board - ie creating, deleting,\r\n  // and syncing the notes[] array in this components state all of the child elements.\r\n  // -------------------------------------------------------------------------------------------------------\r\n\r\n\r\n  // Creates a new note to be displayed.\r\n  createNote = text => {\r\n    let currentState = this.state.notes;\r\n    let randomXPos = Math.floor(Math.random() * (window.innerWidth - 200));\r\n    let randomYPos = Math.floor(Math.random() * (window.innerHeight -200));\r\n    let newNote = { text: text, xPos: randomXPos, yPos: randomYPos };\r\n    currentState = currentState.push(newNote);\r\n    this.setState({ currentState });\r\n  };\r\n\r\n  // Method to be passed to child element, to allow notes[] x/y\r\n  // position values to be updated from the child.\r\n  updateParentPos = (index, xPos, yPos) => {\r\n    let currentState = this.state.notes;\r\n    currentState[index].xPos = xPos;\r\n    currentState[index].yPos = yPos;\r\n    this.setState(currentState);\r\n  };\r\n\r\n  // Method to be passed to child element, to allow notes[] text\r\n  // value to be updated from the child.\r\n  updateParentText = (index, text) => {\r\n    let currentState = this.state.notes;\r\n    currentState[index].text = text;\r\n    this.setState(currentState);\r\n  };\r\n\r\n  // Method called from the delete button on the StickyNote, which removes\r\n  // the specified object from the notes array, therefore deleting the note.\r\n\r\n  // WARNING: This mutates the state, sometimes causing an error where more\r\n  // than one note is deleted - need to impliment a new way of deleting specific\r\n  // objects without mutating the array, but haven't found a working method as of yet.\r\n  deleteNote = index => {\r\n    let currentState = this.state.notes;\r\n    currentState = currentState.splice(index);\r\n    this.setState(currentState);\r\n  }\r\n\r\n  // Function to be passed into map, that prints out each sticky note to the screen,\r\n  // passing in attributes as props and children of the StickyNote element.\r\n  eachNote = (text, i) => {\r\n    return (\r\n      <StickyNote\r\n        key={i}\r\n        index={i}\r\n        updateParentText={this.updateParentText}\r\n        updateParentPos={this.updateParentPos}\r\n        deleteNote={this.deleteNote}\r\n        xPos={this.state.notes[i].xPos}\r\n        yPos={this.state.notes[i].yPos}\r\n      >\r\n        {this.state.notes[i].text}\r\n      </StickyNote>\r\n    );\r\n  };\r\n\r\n  // Loops through the note array, calling this.eachNote on each object, and \r\n  // printing out the notes on the screen.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={() => this.createNote()}\r\n          className=\"newNoteButton\"\r\n        >\r\n          +\r\n        </button>\r\n        <div>{this.state.notes.map(this.eachNote)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board.js'\n\n// Vector retrieved from <a href=\"https://www.freepik.com/free-photos-vectors/poster\">Poster vector created by macrovector - www.freepik.com</a>\n\nclass App extends Component {\n  render() {\n    return (\n       <Board />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}